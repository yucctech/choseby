name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: choseby_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download
      working-directory: ./backend

    - name: Set up test database
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/choseby_test?sslmode=disable
      run: |
        cd backend
        psql $DATABASE_URL -f database/schema.sql

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/choseby_test?sslmode=disable
        JWT_SECRET: test-jwt-secret-key-for-github-actions
      run: |
        cd backend
        # Run only non-integration tests (handler unit tests removed as tech debt)
        # Integration tests require Supabase, not local Postgres
        go test -v -coverprofile=coverage.out ./internal/auth ./internal/database
        go tool cover -func=coverage.out | tee coverage.txt

    - name: Check coverage threshold
      run: |
        cd backend
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "📊 Coverage: ${coverage}%"
        if (( $(echo "$coverage < 15" | bc -l) )); then
          echo "❌ Coverage ${coverage}% is below minimum 15%"
          exit 1
        fi
        echo "✅ Coverage check passed: ${coverage}%"

    - name: Generate coverage badge
      run: |
        cd backend
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        color="red"
        if (( $(echo "$coverage >= 70" | bc -l) )); then
          color="brightgreen"
        elif (( $(echo "$coverage >= 40" | bc -l) )); then
          color="yellow"
        elif (( $(echo "$coverage >= 20" | bc -l) )); then
          color="orange"
        fi
        echo "COVERAGE=${coverage}%" >> $GITHUB_ENV
        echo "BADGE_COLOR=${color}" >> $GITHUB_ENV

    - name: Create coverage comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const coverage = process.env.COVERAGE;
          const comment = `## 📊 Coverage Report\n\n**Coverage: ${coverage}**\n\n✅ All tests passed!`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: backend

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./backend/...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif