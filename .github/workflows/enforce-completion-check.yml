# GitHub Actions: Enforce Completion Checklist
# Prevents merging code that hasn't been properly tested

name: Enforce Completion Checklist

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-completion-evidence:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check for test evidence in PR description
        run: |
          # Ensure PR description contains actual test output
          # Not just claims like "tests pass"

          PR_BODY="${{ github.event.pull_request.body }}"

          # Check for forbidden phrases
          if echo "$PR_BODY" | grep -qi "tests pass\|all tests passing\|everything works"; then
            if ! echo "$PR_BODY" | grep -q "PASS:\|✓\|✅"; then
              echo "❌ ERROR: PR claims tests pass but shows no actual test output"
              echo "Required: Paste actual test results showing PASS"
              echo "See .claude/completion-checklist.md for requirements"
              exit 1
            fi
          fi

          echo "✅ PR description acceptable"

      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: ${{ secrets.SUPABASE_DEV_DATABASE_URL }}
        run: |
          # Run integration tests against Supabase dev database
          # These validate the complete E2E workflow actually works
          echo "Running integration tests against Supabase..."
          go test -v -timeout 10m -tags=integration ./... || {
            echo "❌ Integration tests FAILED - cannot merge"
            echo "Integration tests validate complete workflow with real database"
            exit 1
          }

      - name: Run AI classification tests
        working-directory: ./backend
        run: |
          # Run AI accuracy tests (no database needed)
          echo "Running AI classification accuracy tests..."
          go test -v -timeout 5m ./... -run TestClassificationAccuracy || {
            echo "❌ AI tests FAILED - cannot merge"
            exit 1
          }

      - name: Comment enforcement reminder
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ⚠️ Completion Checklist Enforcement Failed

              Your PR was blocked because it doesn't meet completion requirements.

              **Required Actions**:
              1. Read \`.claude/completion-checklist.md\`
              2. Run tests locally and verify they pass
              3. Paste actual test output in PR description
              4. Push fixes to make tests pass

              **Common Mistakes**:
              - ❌ Claiming "tests pass" without showing output
              - ❌ Only running \`go build\` instead of \`go test\`
              - ❌ Creating test files but not running them

              See the [Completion Checklist](../.claude/completion-checklist.md) for details.`
            })

  enforce-migration-verification:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'backend/database/migrations/')

    steps:
      - uses: actions/checkout@v3

      - name: Check migration has verification proof
        run: |
          # If PR adds migration file, require proof it was applied
          PR_BODY="${{ github.event.pull_request.body }}"

          if ! echo "$PR_BODY" | grep -qi "migration applied\|SELECT.*FROM information_schema"; then
            echo "❌ ERROR: Migration file added but no proof of execution"
            echo "Required: Show SQL query results proving schema changes exist"
            echo "Example: SELECT column_name FROM information_schema.columns WHERE table_name = 'your_table';"
            exit 1
          fi

          echo "✅ Migration verification found in PR description"
